#BlueJ class context
comment0.params=i
comment0.target=Graph_Matrix(int)
comment0.text=\r\n\ Im\ Konstruktor\ gibt\ man\ die\ maximale\ Anzahl\ der\ Knoten\ an.\ Es\ ist\ nicht\ moeglich,\ bei\ \r\n\ einem\ angelegten\ Graphen\ nachtraeglich\ mehr\ Knoten\ einzufuegen,\ als\ beim\ Anfang\ angegeben\r\n\ wurden.\r\n\ Im\ Konstruktor\ werden\ alle\ verwendeten\ Arrays\ auf\ die\ entsprechende\ Laenge\ initialisiert.\r\n\ \r\n\ @param\ \ i\ die\ maximale\ Anzahl\ der\ Knoten.\r\n\ \r\n
comment1.params=s
comment1.target=void\ knotenEinfuegen(java.lang.String)
comment1.text=\r\n\ Innerhalb\ dieser\ Methode\ wird\ ein\ neuer\ Knoten\ erzeugt\ und\ dem\ Graphen\ hinzugefuegt.\r\n\ Vorher\ wird\ ueberprueft,\ ob\ 1.\ noch\ Platz\ fuer\ den\ Knoten\ ist\ oder\ bereits\ die\ Maximalzahl\r\n\ erreicht\ ist,\ und\ 2.\ ob\ es\ bereits\ einen\ Knoten\ mit\ dem\ gleichen\ Namen\ gibt.\r\n\ Dann\ wird\ der\ Knoten\ in\ das\ Knoten-Arrays\ an\ der\ passenden\ Stelle\ eingebaut\ und\ in\ der\ Matrix\r\n\ wird\ an\ der\ passenden\ Stelle\ 0\ geschrieben.\r\n\ Danach\ werden\ alle\ potentiell\ moeglichen\ Kanten,\ die\ zu\ dem\ Knoten\ gehoeren\ koennten,\ auf\ -1\ \r\n\ gesetzt.\r\n\ Zum\ Schluss\ wird\ der\ Zaehler\ fuer\ die\ aktuelle\ Anzahl\ der\ Knoten\ um\ 1\ erhoeht.\r\n\ \r\n\ @param\ s\ Bezeichner\ des\ einzufuegenden\ Knoten.\ \r\n
comment2.params=von\ nach\ gewichtung
comment2.target=void\ kanteEinfuegen(java.lang.String,\ java.lang.String,\ int)
comment2.text=\r\n\ Innerhalb\ dieser\ Methode\ wird\ eine\ neue\ Kante\ zwischen\ zwei\ Knoten\ erzeugt\ und\ dem\ \r\n\ Graphen\ hinzugefuegt.\r\n\ Dazu\ wird\ erst\ ermittelt,\ ob\ es\ die\ betreffenden\ Knoten\ ueberhaupt\ gibt.\ (Dabei\ werden\ \r\n\ aus\ den\ Bezeichnern/Schluesseln\ der\ Knoten\ deren\ interne\ Nummern\ ermittelt,\ naemlich\ die\ \r\n\ Index-Nummer\ des\ Knoten-Arrays.\ Wenn\ diese\ Nummern\ -1\ sind,\ bedeutet\ es,\ dass\ es\ Knoten\r\n\ mit\ diesen\ Bezeichnern\ gar\ nicht\ gibt.)\r\n\ Nur\ wenn\ es\ beide\ Knoten\ gibt,\ und\ wenn\ sie\ voneinander\ verschieden\ sind,\ dann\ wird\ die\r\n\ Kante\ mit\ der\ entsprechenden\ Gewichtung\ angelegt.\r\n\ \r\n\ @param\ von\ der\ Bezeichner\ des\ Startknoten\ der\ Kante\r\n\ @param\ nach\ der\ Bezeichner\ des\ Zielknoten\ der\ Kante\r\n\ @param\ gewichtung\ die\ Gewichtung\ der\ Kante\r\n
comment3.params=s
comment3.target=int\ knotenNummer(java.lang.String)
comment3.text=\r\n\ Diese\ Methode\ ermittelt\ aus\ dem\ gegebenen\ Bezeichner/Schluessel\ eines\ Knotens\ die\ entsprechende\ Nummer\r\n\ in\ dem\ Knoten-Array,\ das\ zur\ Verwaltung\ der\ Knoten\ verwendet\ wird.\ Das\ ist\ eine\ reine\ Hilfsmethode.\r\n\ \r\n\ @param\ s\ der\ Bezeichner\ des\ Knoten\r\n\ @return\ die\ Nummer\ des\ Knoten\ im\ Array.\ Ist\ -1,\ wenn\ es\ einen\ Knoten\ mit\ diesem\ Bezeichner\ nicht\ gibt.\r\n
comment4.params=
comment4.target=void\ ausgeben()
comment4.text=\r\n\ Diese\ Methode\ gibt\ die\ Adjazenzmatrix\ des\ Graphen\ auf\ der\ Konsole\ aus.\r\n
comment5.params=
comment5.target=int\ knotenAnzahlGeben()
comment5.text=\r\n\ Diese\ Methode\ ermittelt\ die\ Anzahl\ der\ Knoten\ im\ Graphen.\ Sie\ kann\ nie\ hoeher\ werden\ als\ die\ beim\ \r\n\ Anlegen\ des\ Graphen\ festgelegte\ Hoechstgrenze.\r\n\ @return\ aktuelle\ Anzahl\ der\ Knoten\ im\ Graphen.\r\n
comment6.params=
comment6.target=void\ tiefensuche()
comment6.text=\r\n\ Startet\ die\ Tiefensuche\ automatisch\ vom\ ersten\ Element\ des\ Feldes\ aus.\r\n
comment7.params=s
comment7.target=void\ tiefensuche(java.lang.String)
comment7.text=\r\n\ Startet\ die\ Tiefensuche\ von\ einem\ beliebigen\ Startpunkt\ aus.\r\n\ Bereitet\ davor\ alles\ fuer\ die\ Tiefensuche\ vor\ -\ setzt\ insbesondere\r\n\ alle\ Knoten\ auf\ unbesucht\ und\ ruft\ danach\ die\ eigentliche\ rekursive\r\n\ Suchmethode\ auf.\r\n\ @param\ s\ *Bezeichner*\ des\ Startknotens\r\n
comment8.params=i
comment8.target=void\ besuchen(int)
comment8.text=\r\n\ Die\ eigentliche\ rekursive\ Tiefensuchmethode.\ Markiert\ den\ aktuellen\ Knoten\ als\ besucht\r\n\ und\ ueberprueft\ danach\ alle\ vorhandenen\ Kanten\ von\ diesem\ Knoten\ aus,\ ob\ sie\ noch\ verfolgt\r\n\ werden\ muessen.\ Wenn\ ja,\ wird\ fuer\ die\ jeweiligen\ Knoten\ wieder\ diese\ Methode\ aufgerufen.\r\n\ @param\ i\ *Nummer*\ des\ aktuell\ behandelten\ Knotens\r\n
numComments=9
